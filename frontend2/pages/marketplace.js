import Head from 'next/head'
import Image from 'next/image'
import Layout from '@/components/Layout/Layout'
import { useAccount, useProvider, useSigner } from 'wagmi'
import {
  Text, Flex, Button, Card, Menu,
  MenuButton,
  MenuList,
  MenuItem,
  MenuItemOption,
  MenuGroup,
  MenuOptionGroup,
  MenuDivider
} from '@chakra-ui/react'
import {
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
} from '@chakra-ui/react'
import { useEffect, useState } from 'react'
import { ethers } from 'ethers'
import { contractAddress, abi } from "../public/constants"




export default function Marketplace() {

  const { address, isConnected } = useAccount()
  const [nftList, setNftList] = useState([]);
  const { data: signer } = useSigner();
  const [buy, setBuy] = useState([]);
  const [uri, setUri] = useState([]);



  async function fetchNfts() {
    const contract = new ethers.Contract(contractAddress, abi, signer)
    const nfts = await contract.getAllNFTs();

    setNftList(nfts);
  }

  useEffect(() => {
    fetchNfts();
    getUrl()
    tokenBuyEvent()
  }, [address, signer, nftList, uri]);


  async function tokenBuyEvent() {
    if (isConnected) {
      const contract = new ethers.Contract(contractAddress, abi, signer)

      const tokenBuyFilter = contract.filters.TokenBuy();

      const buyEvents = await contract.queryFilter(tokenBuyFilter);

      const buyArray = buyEvents.map((event) => {
        const { seller, buyer, tokenId, price } = event.args;
        return [seller, buyer, tokenId, price];
      });

      setBuy(buyArray);
    }
  }

  async function buyShamble(id, price) {
    if (isConnected) {
      const contract = new ethers.Contract(contractAddress, abi, signer)
      await contract.buyShamble(parseInt(id), { value: price });
    }
  }

  async function getUrl() {
    const contract = new ethers.Contract(contractAddress, abi, signer)
    const url = []
    for (let i = 0; i < nftList.length; i++) {
      let uri = await contract.tokenURI(nftList[i][3])
      url.push(uri);
    }
    setUri(url)
  }



  return (
    <>
      <Head>
        <title>Shambles DApp : MarketPlace</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div align="center">

          <div id='nftGrid'>
            {nftList.map((nft, index) => (
              < div key={nft[3]} >
                < Image src={uri[index]} alt="img" width={400} height={400} style={{ margin: 10 }} />
                <Card style={{ margin: 20, padding: 10, border: `10px solid ${nft[0] ? "green" : "red"}` }} key={nft[3]}>
                  id#{nft[3]}
                  {nft[0] && isConnected ? <p><Button onClick={() => buyShamble(nft[3], nft[1])}>BUY</Button> Token Price: {ethers.utils.formatEther(nft[1].toString())} eth</p> : "not for sale"}

                  {address != nft[2] ?
                    <p> owner: 0x...{nft[2].slice(-4)}</p>
                    : <div className="text-emerald-700">You are the owner of this NFT</div>
                  }
                  <div>
                    <Menu placeholder="past sell">
                      <MenuButton as={Button} >
                        Past transfers
                      </MenuButton>
                      <MenuList>

                        {buy.filter(item => item[2].toString() === nft[3].toString()).map((item) => (
                          <MenuItem key={item[2]}>
                            <p>Seller:0x...{item[0].slice(-4)} / </p>
                            <p> Buyer:0x...{item[1].slice(-4)} / </p>
                            <p> Token ID: {item[2].toString()} / </p>
                            <p> Price: {ethers.utils.formatEther(item[3].toString())} eth</p>
                          </MenuItem>
                        ))}
                      </MenuList>
                    </Menu>
                  </div>
                </Card>
              </div>
            ))}
          </div>
        </div>
      </Layout >
    </>
  )
}
